//
// NewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NewsAPI {

    /**
     News List
     
     - parameter q: (query) Theme of news 
     - parameter sortBy: (query) Sort 
     - parameter apiKey: (query) API key 
     - parameter from: (query) date and optional time for the oldest article (optional)
     - parameter to: (query) date and optional time for the newest article (optional)
     - parameter language: (query) Language in two letters (optional)
     - parameter page: (query) number of page (optional)
     - parameter pageSize: (query) number of results to return per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func everythingGet(q: String, sortBy: ArticleSort, apiKey: String, from: Date? = nil, to: Date? = nil, language: String? = nil, page: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ArticleList?, _ error: Error?) -> Void)) {
        everythingGetWithRequestBuilder(q: q, sortBy: sortBy, apiKey: apiKey, from: from, to: to, language: language, page: page, pageSize: pageSize).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     News List
     - GET /everything/
     - parameter q: (query) Theme of news 
     - parameter sortBy: (query) Sort 
     - parameter apiKey: (query) API key 
     - parameter from: (query) date and optional time for the oldest article (optional)
     - parameter to: (query) date and optional time for the newest article (optional)
     - parameter language: (query) Language in two letters (optional)
     - parameter page: (query) number of page (optional)
     - parameter pageSize: (query) number of results to return per page (optional)
     - returns: RequestBuilder<ArticleList> 
     */
    open class func everythingGetWithRequestBuilder(q: String, sortBy: ArticleSort, apiKey: String, from: Date? = nil, to: Date? = nil, language: String? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ArticleList> {
        let localVariablePath = "/everything/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "sortBy": sortBy.encodeToJSON(),
            "language": language?.encodeToJSON(),
            "apiKey": apiKey.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ArticleList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
