/**
 * metaweather
 *
 * metaweather.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package one.beagile.metaweatherClient.models


import kotlinx.serialization.*

/**
 * 
 *
 * Values: snow,sleet,hail,thunderstorm,heavyRain,lightRain,showers,heavyCloud,lightCloud,clear
 */
@Serializable
enum class WeatherState(val value: kotlin.String) {

    @SerialName(value = "Snow")
    snow("Snow"),

    @SerialName(value = "Sleet")
    sleet("Sleet"),

    @SerialName(value = "Hail")
    hail("Hail"),

    @SerialName(value = "Thunderstorm")
    thunderstorm("Thunderstorm"),

    @SerialName(value = "Heavy Rain")
    heavyRain("Heavy Rain"),

    @SerialName(value = "Light Rain")
    lightRain("Light Rain"),

    @SerialName(value = "Showers")
    showers("Showers"),

    @SerialName(value = "Heavy Cloud")
    heavyCloud("Heavy Cloud"),

    @SerialName(value = "Light Cloud")
    lightCloud("Light Cloud"),

    @SerialName(value = "Clear")
    clear("Clear");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: Any?): kotlin.String? = if (data is WeatherState) "$data" else null

        /**
         * Returns a valid [WeatherState] for [data], null otherwise.
         */
        fun decode(data: Any?): WeatherState? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

